using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CARP
{
    /// <summary>
    /// 合成聚合原则，尽量使用合成/聚合，尽量不要使用类继承。
    /// 对象的继承关系是在编译时就定义好的，所以无法在运行时改变从父类继承的实现。
    /// 子类的实现与它的父类有非常紧密的关系，以至于在父类中的任何变化必然会导致子类发生变化。
    /// 当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其他更合适的类替换。
    /// 这种依赖关系限制了灵活性并最终限制了复用性。
    /// 
    /// 优先使用对象的合成/聚合将有助于保持每个类的封装性，并被集中在单个任务上。这样类和类继承层次会保持较小规模，并且不太可能
    /// 增长为不可控制的庞然大物。
    /// 
    /// 
    /// </summary>
    public class Class1
    {
    }
    /// <summary>
    /// 桥接模式，将抽象部分与它的实现部分分离，使他们都可以独自的变化。
    /// 抽象与实现的分离，这并不是说，让抽象类与其派生类分离，实现指的是抽象类和它的派生类用来实现自己的对象。
    /// 实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。
    /// 
    /// 只要深入理解设计原则，很多设计模式就是原则的应用而已，或许在不知不觉间就在使用设计模式了。
    /// 
    /// </summary>
    public class Bridge
    {

    }
}
